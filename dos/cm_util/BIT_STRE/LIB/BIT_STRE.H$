.Vt,04000 BIT_STRE.H 18-May-93,14:37:06,`ROGERS' initial code
.I 278
#ifndef __BIT_STREAM_CLASS
#define __BIT_STREAM_CLASS

/*****************************************************************************
*
*  TITLE:        Bit Stream class
*
*  DESCRIPTION:  The class "BIT_STREAM"
*                provides a container for bits.
*                Bits may be added to or removed from
*                the beginning or end of the stream.
*                Various other utilities are provided.
*
*  *k "%n"
*  FILE NAME:    ""
*
*  *k "%v"
*  VERSION:      ""
*
*  REFERENCE:    None.
*
*****************************************************************************/

#ifndef __icitypes
#include "icitypes.h"
#endif


class BIT_STREAM
{
protected:

   UINT8 *base;          // pointer to base of bit storage
   UINT size;            // number of bits allocated for use
   UINT count;           // number of bits available
   UINT head;            // beginning (source) of stream
   UINT tail;            // pointer to end (sink) of stream
   BOOLEAN is_mapped;    // whether bit-stream is mapped on other memory

/*-------------------------------------------------------------------------
   Source: "BIT_STR1.cpp"
  -------------------------------------------------------------------------*/

public:

   BIT_STREAM(

        UINT size_in_bits);

/*-------------------------------------------------------------------------
   Source: "BIT_STR2.cpp"
  -------------------------------------------------------------------------*/

public:

   BIT_STREAM(

        void *memory_for_mapping,
        UINT size_in_bits);

/*-------------------------------------------------------------------------
   Source: "_BIT_ST1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual ~BIT_STREAM();

/*-------------------------------------------------------------------------
   Source: "Count1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual UINT Count();

/*-------------------------------------------------------------------------
   Source: "Get1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual UINT32 Get(

        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Get2.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual void Get(

        UINT8* into_data,
        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Get_Bac1.cpp"
  -------------------------------------------------------------------------*/

public:

   UINT32 Get_Back(

        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Get_Bac2.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual void Get_Back(

        UINT8* into_data,
        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Get_Bit1.cpp"
  -------------------------------------------------------------------------*/

public:

   UINT8 Get_Bit();

/*-------------------------------------------------------------------------
   Source: "Get_Bit2.cpp"
  -------------------------------------------------------------------------*/

public:

   UINT8 Get_Bit_Back();

/*-------------------------------------------------------------------------
   Source: "Is_Empt1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual BOOLEAN Is_Empty();

/*-------------------------------------------------------------------------
   Source: "Is_Full1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual BOOLEAN Is_Full();

/*-------------------------------------------------------------------------
   Source: "op_brac1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual UINT8 operator [] (

        UINT index);

/*-------------------------------------------------------------------------
   Source: "Peek1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual UINT32 Peek(

        UINT index,
        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Poke1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual void Poke(

        UINT index,
        UINT8 bit);

/*-------------------------------------------------------------------------
   Source: "Put1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual UINT Put(

        UINT32 data,
        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Put2.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual UINT Put(

        UINT8* out_of_data,
        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Put_Bac1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual UINT Put_Back(

        UINT32 data,
        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Put_Bac2.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual UINT Put_Back(

        UINT8* out_of_data,
        UINT number_of_bits);

/*-------------------------------------------------------------------------
   Source: "Put_Bit1.cpp"
  -------------------------------------------------------------------------*/

public:

   void Put_Bit(

        UINT8 bit);

/*-------------------------------------------------------------------------
   Source: "Put_Bit2.cpp"
  -------------------------------------------------------------------------*/

public:

   void Put_Bit_Back(

        UINT8 bit);

/*-------------------------------------------------------------------------
   Source: "Reset1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual void Reset();

/*-------------------------------------------------------------------------
   Source: "Undo_Ge1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual void Undo_Get(

        UINT number_of_bits = 1);

/*-------------------------------------------------------------------------
   Source: "Undo_Pu1.cpp"
  -------------------------------------------------------------------------*/

public:

   virtual void Undo_Put(

        UINT number_of_bits = 1);

};   //class BIT_STREAM


#endif
